@startuml
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!includeurl C4P/C4_Container.puml

title C4 Infrastructure Diagram - Сервис парковки с шардингом и репликацией

package "Яндекс.Облако" as cloud {
    Container(nginx, "Nginx", "Nginx", "Обратный прокси и балансировщик нагрузки")

    package "Kubernetes Cluster" as k8s_cluster {
        package "Auth Pod" as auth_pod {
            Container(auth_service, "Auth Service", "Go", "Шлюз авторизации и аутентификации")
        }

        package "Tarif Pod" as tarif_pod {
            Container(tarif_service, "Tarif Service", "Go", "Сервис тарификации")
        }

        package "Notification Pod" as notification_pod {
            Container(notification_service, "Notification Service", "Go", "Сервис уведомлений")
        }

        package "Support Pod" as support_pod {
            Container(support_service, "Support Service", "Go", "Сервис поддержки")
        }

        package "Report Pod" as report_pod {
            Container(report_service, "Report Service", "Go", "Сервис аналитики")
        }

        package "User Pod" as user_pod {
            Container(user_service, "User Service", "Go", "Сервис управления пользователями")
        }

        package "Session Pod" as session_pod {
            Container(session_service, "Session Service", "Go", "Сервис сессий")
        }

        package "PhotoControl Pod" as photo_control_pod {
            Container(photo_control_service, "Photo Control Service", "Go", "Сервис фотоконтроля")
        }

        package "Rating Pod" as rating_pod {
            Container(rating_service, "Rating Service", "Go", "Сервис рейтинга")
        }

        package "Destribution Pod" as destribution_pod {
            Container(destribution_service, "Destribution Service", "Go", "Сервис распределения заказов")
        }

        package "Order Pod" as order_pod {
            Container(order_service, "Order Service", "Go", "Сервис заказа такси")
        }
    }

    Container(kafka, "Брокер сообщений", "Apache Kafka", "Асинхронная обработка событий между сервисами")
}

package "Database Servers (Sharded)" as database {
    Container(meta_database, "Meta Database", "PostgreSQL", "Каталог шардов и реплик для маршрутизации запросов")

    package "Shard Москва" as shard_moscow {
        Container(shard_moscow_master, "PostgreSQL Master", "PostgreSQL", "Основная база данных для Москвы")
        Container(shard_moscow_replica, "PostgreSQL Replica", "PostgreSQL", "Реплика базы данных для Москвы")
    }

    package "Shard Санкт-Петербург" as shard_spb {
        Container(shard_spb_master, "PostgreSQL Master", "PostgreSQL", "Основная база данных для Санкт-Петербурга")
        Container(shard_spb_replica, "PostgreSQL Replica", "PostgreSQL", "Реплика базы данных для Санкт-Петербурга")
    }

    package "Shard Татарстан (Казань)" as shard_kazan {
        Container(shard_kazan_master, "PostgreSQL Master", "PostgreSQL", "Основная база данных для Татарстана")
        Container(shard_kazan_replica, "PostgreSQL Replica", "PostgreSQL", "Реплика базы данных для Татарстана")
    }
}

System_Ext(map_service, "Сервис карт", "Я.Карты Maps API")


System_Ext(email, "Email сервис", "отправка уведомлений")
System_Ext(geocoder, "Геокодер", "Предоставление адреса по координатам, и наоборот")
System_Ext(payment_system, "Платежная система", "Обработка платежей клиентов и зачисление средств водителям.")
System_Ext(map_service, "Сервисы карт (например, Яндекс.Карты)", "Навигация и маршруты для водителей.")

' Соединения между сервисами и базами данных в каждом регионе
Rel(k8s_cluster, database , "Чтение/Запись", "JDBC")

' Соединения между мастерами и репликами для репликации данных
Rel_D(database_r1_master, database_r1_replica, "Репликация", "Streaming")
Rel_D(database_rn_master, database_rn_replica, "Репликация", "Streaming")

' Взаимодействие с внешними системами
Rel(order_service, geocoder, "Запрос данных по адресу", "REST API")
Rel(order_service, map_service, "Запрос карт и маршрутов", "REST API")
Rel(order_service, payment_system, "Запрос обработки платежей", "REST API")
Rel(notification_service, email, "Отправка уведомлений", "REST API")
Rel(auth_service, email, "Отправка уведомлений", "REST API")
Rel(support_service, map_service, "Запрос маршрутов")

' Соединение Nginx с сервисами
Rel(nginx, k8s_cluster, "Проксирование запросов", "HTTP")

Rel(k8s_cluster, kafka, "Публикация событий о авторизациях", "Kafka Producer API")

k8s_cluster ---[hidden]---> database


auth_service ---[hidden]---> email
@enduml