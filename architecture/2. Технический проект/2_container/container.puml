@startuml Диаграмма контейнеров
title "C4. Контейнеры"
' #логинг мониторинг вынести
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!$ICONURL = "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/v3.0.0/icons"
!include $ICONURL/common.puml
!include $ICONURL/devicons/react.puml
!include $ICONURL/devicons/go.puml
!include $ICONURL/devicons/postgresql.puml
!include $ICONURL/devicons2/sqlite.puml

Person(client, "Клиент", "Заказ такси, отслеживание поездки, оплата и рейтинг водителей")
Person(driver, "Водитель", "Получение заказов, выполнение поездок, отправка фото документов и отчетов")
Person(admin, "Администратор", "Управление пользователями, настройка системы, аналитика и отчеты")
Person(support, "Тех поддержка", "Помогает пользователям в решении вопросов, проблем")

System_Boundary(taxiService, "Такси Сервис") {
    System_Boundary(services, "Сервисы") {
    
        Container(auth_service, "Шлюз авторизации и аутентификации", "Go", "", $sprite="go")
        Container(monitoring, "Система мониторинга")
        Container(photoControlService, "Сервис фотоконтроля", "Go", $sprite="go")
        Container(users_service, "Сервис управления пользователей", "Go", $sprite="go")
        Container(logging_service, "Сервис логирования", "Go", $sprite="go")
        Container(session_service, "Сервис сессий", "Go", $sprite="go")
        Container(notification_service, "Сервис уведомлений", "Go", $sprite="go")
        Container(order_service, "Сервис заказа такси", "Go", $sprite="go")
        Container(support_service, "Сервис поддержки", "Go", $sprite="go")
        Container(rating_service, "Сервис рейтинга", "Go", $sprite="go")
        Container(analytic_service, "Сервис аналитики", "Go", $sprite="go")
        Container(tarif_service, "Сервис тарификации", "Go", $sprite="go")
    }
    Container(frontend_passanger, "Клиентское мобильное приложение", "React Native", $sprite="react")
    Container(web_app, "Административное Web-приложение", "Go, React", "", $sprite="react")
    Container(database, "База данных", "PostgreSQL", "", $sprite="postgresql")
    Container(kafka, "Брокер сообщений", "Kafka", "")
}
System_Ext(email, "Email сервис", "отправка уведомлений")
System_Ext(geocoder, "Геокодер", "Предоставление адреса по координатам, и наоборот")
System_Ext(payment_system, "Платежная система", "Обработка платежей клиентов и зачисление средств водителям.")
System_Ext(map_service, "Сервисы карт (например, Яндекс.Карты)", "Навигация и маршруты для водителей.")

Rel(client, frontend_passanger, "Посещает", "HTTPS")
Rel(driver, frontend_passanger, "Посещает", "HTTPS")

Rel(admin, web_app, "Посещает", "HTTPS")
Rel(support, web_app, "Посещает", "HTTPS")

Rel(frontend_passanger, services, "API вызовы", "REST API")
Rel(web_app, services, "API вызовы", "REST API")

Rel(monitoring, email, "API вызовы", "REST API")
Rel(auth_service, email, "API вызовы", "REST API")


Rel(order_service, map_service, "Получает данные для отображение карты /маршрута", "REST API")
Rel(order_service, payment_system, "Производит оплату", "REST API")


Rel(frontend_passanger, map_service, "Получает данные по карте", "REST API")
Rel(web_app, map_service, "Получает данные по карте", "REST API")


Rel(order_service, geocoder, "Получает данные по местоположению клиента/водителя")

Rel(notification_service, email, "API вызовы", "REST API")
Rel(services, database, "Пишет/читает")
Rel(services, kafka, "Создает/читает события")

